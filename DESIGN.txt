
~ rlisp ~

todo:

- printing of data readable by reader
- let 
- comments
- strings (immutable)
- maps
- sets
- expose eval to runtime
- if 
- macros
- require local file

ideas:

  - something like transducers but more sane
  - associative data type?
  - auto reloading of src files from repl?
  - docstrings?
  - async/promises built in?
  - js interop?
  - deps from anywhere (github, http) stored exactly once

projects:

  - a simple inteface for streams
      - take advantage of async/io, with a functional style 
      - replace the event emitter pattern of .on()
      - abstractions for common stream patterns:
          - map a function across each value
          - when to apply backpressure 
          - limit to a rate 
          - reduce (transducer) which can collect values and emit 
          - ^ materialized view
          - storing/caching of the (immutable) stream to spead up rereads
            - if an application restarts, it would only need to read from last saved value
          - chain stream modifiers (->, .pipe())
          - compat with existing streams (or wrap interfaces) 

  - passing lisp code over the wire with a duplex connection
    - syncing RPC 
    - deploy production code (heroku log talk)
    - 0 downtime deployments?
    - expose over HTTP?

  - duplex stream capabilities (functional?) would enable applications such as:
      - CRDTs
      - terminal emulation 
      - evented systems 

            


